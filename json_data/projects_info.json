{
  "projects": [
    {
      "id": "YouTubeDataAnalysis",
      "title": "YouTube Data Analysis",
      "subtitle": "Data Science Insights on YouTube Trends by Country",
      "introduction": "<strong>YouTube Data Analysis – Country-Wise Content Trends</strong> leverages <strong>YouTube API</strong> data to analyze regional content preferences, providing valuable insights for <strong>marketers</strong>, <strong>creators</strong>, and <strong>researchers</strong>. Built with scalable data handling on <strong>AWS</strong>, this project uncovers what resonates with audiences in different countries.",
      "background": "Optimizing content strategies requires <strong>understanding regional YouTube trends</strong>, yet existing tools often lack country-specific insights. This project fills that gap by retrieving and analyzing <strong>YouTube data</strong> by country, enabling more targeted strategies.",
      "features": [
        "<strong>API Integration:</strong> Fetches country-specific trending data directly from <strong>YouTube</strong>.",
        "<strong>AWS-Based Storage and Processing:</strong> <strong>AWS S3</strong>, <strong>Glue</strong>, <strong>Lambda</strong>, and <strong>Athena</strong> provide scalable data handling and processing.",
        "<strong>Data Visualization:</strong> Visual trends displayed via <strong>AWS QuickSight</strong> reveal user preferences across regions.",
        "<strong>Automated Data Pipeline:</strong> Daily data imports ensure real-time insights.",
        "<strong>Data Security:</strong> Secure handling with <strong>AWS</strong> infrastructure, in line with <strong>YouTube API</strong> guidelines."
      ],
      "tech_stack": "Built using <strong>Python</strong> for data handling, <strong>AWS</strong> for scalable storage and processing (<strong>S3</strong>, <strong>Glue</strong>, <strong>Athena</strong>, <strong>QuickSight</strong>), and the <strong>YouTube API</strong> for data access.",
      "development": "<strong>Data Collection:</strong> Real-time trending data stored on <strong>AWS S3</strong>.<br><strong>Data Transformation:</strong> <strong>AWS Glue</strong> and <strong>Lambda</strong> used for data cleaning and conversion to Parquet format.<br><strong>Data Visualization:</strong> Country-specific trends visualized through <strong>AWS QuickSight</strong> charts.<br><strong>Data Security:</strong> <strong>AWS IAM</strong> ensures controlled and secure access.",
      "challenges": "Key challenges included handling <strong>Data Volume</strong> in country-specific partitioning, ensuring <strong>Data Quality</strong> during transformations, and managing <strong>Historical Data</strong> limitations of the <strong>YouTube API</strong>.",
      "results": "This project enables scalable analysis of <strong>YouTube trends</strong> across countries, providing valuable insights into regional preferences. Real-time data helps <strong>marketers</strong> and <strong>content creators</strong> adjust their strategies to stay ahead of emerging trends.",
      "feedback": "Users appreciated the tool's simplicity and valuable insights, which allowed <strong>marketers</strong> to refine targeting strategies and <strong>content creators</strong> to boost engagement.",
      "improvements": "<strong>Enhanced Analytics:</strong> Plan to develop a <strong>web interface</strong> with advanced analytics options.<br><strong>Historical Data:</strong> Further explore options for including historical trend data.<br><strong>Improved Interface:</strong> Increase interactivity for in-depth data exploration.",
      "conclusion": "This project uses <strong>data science</strong> and <strong>AWS</strong> to reveal <strong>YouTube content trends</strong> globally. The secure, scalable system provides actionable insights, empowering <strong>marketers</strong> and <strong>creators</strong> to make <strong>data-informed decisions</strong>.",
      "categories": ["Data Science", "AWS"],
      "skills": ["Data Analysis", "YouTube API", "Data Processing Pipeline", "AWS", "Real-time Data Handling"],
      "image": "images/projects/YouTubeDataAnalysis/YouTubeDataAnalysis.jpg",
      "media": {
        "type": "ppt",
        "path": "https://docs.google.com/presentation/d/1jErowRLeUgOvMJxlHR8TBK16WoWukWIy/edit?usp=sharing&ouid=104870617554992213042&rtpof=true&sd=true"
      }
    },

    {
      "id": "PlantDiseaseDetection",
      "title": "Plant Disease Detection",
      "subtitle": "Data-Driven Plant Disease Detection for Backyard Farmers",
      "introduction": "<strong>Plant Disease Detection for Backyard Farmers</strong> addresses a common challenge: accurate plant disease diagnosis, especially for amateur gardeners. This <strong>Android app</strong> leverages <strong>AI</strong> to provide instant, reliable disease detection, helping users maintain healthier crops.",
      "background": "With the rise of backyard farming, novice gardeners often struggle with plant health management due to limited diagnostic tools. This project employs <strong>AI-driven image analysis</strong> to help users detect plant diseases early, enabling effective and timely intervention.",
      "features": [
        "<strong>ResNet-9 Model:</strong> Achieves high accuracy (99.2%) in identifying plant diseases.",
        "<strong>Image-Based Detection:</strong> Analyzes plant images instantly to identify diseases.",
        "<strong>User-Friendly Interface:</strong> Designed for ease of use, even for non-technical users.",
        "<strong>Sustainable Farming:</strong> Helps gardeners take proactive steps for crop health."
      ],
      "tech_stack": "Built with the <strong>ResNet-9</strong> model for image classification, trained using <strong>PyTorch</strong> and the <strong>PlantVillage dataset</strong>, integrated into an <strong>Android app</strong> for real-time disease detection.",
      "development": "<strong>Data Collection:</strong> Utilized 87,000 labeled leaf images for model training and validation.<br><strong>Model Selection:</strong> <strong>ResNet-9</strong> chosen for its accuracy and reliability, enhanced with data augmentation.<br><strong>Training Optimization:</strong> Techniques like batch normalization and gradient descent were applied.<br><strong>Android Integration:</strong> Deployed in an app to provide disease detection directly on user devices.",
      "challenges": "<strong>Model Optimization:</strong> Balancing speed and accuracy for real-time use.<br><strong>Overfitting Prevention:</strong> Used learning rate scheduling to improve generalization.<br><strong>Deployment:</strong> Leveraged a <strong>Python API</strong> and local <strong>GPU</strong> for efficient model processing.",
      "results": "The app delivers a 99.2% accurate diagnosis of plant diseases, enabling backyard farmers to address crop health issues proactively.",
      "feedback": "Users appreciated the app's accuracy and ease of use, noting its value for early disease intervention and overall crop health.",
      "improvements": "<strong>Dataset Expansion:</strong> Adding more plant species and diseases.<br><strong>Enhanced App Features:</strong> Allow image capture within the app for real-time analysis.<br><strong>Personalized Disease Management Tips:</strong> Tailored advice based on detected diseases.",
      "conclusion": "This project showcases <strong>AI’s</strong> potential in supporting <strong>sustainable agriculture</strong>, providing a <strong>data science-driven tool</strong> to enhance plant health management. Planned improvements aim to broaden disease coverage and further empower users with actionable insights.",
      "categories": ["Data Science", "Artificial Intelligence", "Python"],
      "skills": ["Image Processing", "Deep Learning", "ResNet-9", "PyTorch", "Machine Learning Deployment"],
      "image": "images/projects/PlantDiseaseDetection/PlantDiseaseDetection.jpg",
      "github": "https://github.com/dixituwindsor/Plant_Disease_Detection",
      "media": {
        "type": "png",
        "path": "./resources/PlantDiseaseDetection.png"
      }
    },

    {
      "id": "DiabetesDiseasePrediction",
      "title": "Diabetes Disease Prediction",
      "subtitle": "Data Science Approach to Diabetes Prediction Using Machine Learning on Big Healthcare Data",
      "introduction": "This study focuses on <strong>data science</strong> techniques applied to <strong>diabetes prediction</strong> using healthcare data. It analyzes and evaluates various <strong>machine learning models</strong>, providing insights into each model's predictive capabilities and limitations. The project aims to enhance diabetes prediction using a data-driven approach that could support healthcare professionals in early detection efforts.",
      "background": "<strong>Diabetes</strong> is a global health concern, impacting millions worldwide. This project applies <strong>data science</strong> principles to explore healthcare data and develop predictive models for diabetes, providing early diagnostic support through <strong>machine learning</strong>.",
      "features": [
        "<strong>Data-Driven Model Comparison:</strong> Detailed analysis of models including <strong>Naive Bayes</strong>, <strong>SVM</strong>, and <strong>Random Forest</strong> for optimal predictive performance.",
        "<strong>Big Data Analysis:</strong> Focus on handling extensive healthcare datasets for accurate prediction using machine learning techniques.",
        "<strong>Comprehensive Model Evaluation:</strong> <strong>WEKA</strong> tool was used to build and compare models, with <strong>Support Vector Machine</strong> performing best for diabetes classification.",
        "<strong>Predictive Insights:</strong> Provides data-driven insights by evaluating multiple machine learning models, identifying potential patterns and areas for improvement."
      ],
      "tech_stack": "Developed using <strong>WEKA</strong> and <strong>Python</strong>, focusing on <strong>machine learning</strong> and data preprocessing. Models tested include <strong>Naive Bayes</strong>, <strong>SVM</strong>, <strong>Random Forest</strong>, <strong>CNN</strong>, <strong>LSTM</strong>, and more to cover a range of predictive capabilities.",
      "development": "<strong>Model Selection:</strong> Selection of both traditional and advanced models, from <strong>Logistic Regression</strong> to <strong>CNN</strong> and <strong>LSTM</strong>.<br><strong>Performance Metrics:</strong> Evaluated models based on <strong>accuracy</strong>, <strong>precision</strong>, <strong>recall</strong>, and <strong>F-Measure</strong>.<br><strong>Feature Engineering:</strong> Ensured data quality and effective handling of large healthcare datasets to support accurate model training and testing.",
      "challenges": "Key challenges included:<br><strong>Big Data Handling:</strong> Efficient processing of healthcare datasets.<br><strong>Model Performance:</strong> Optimizing models such as <strong>Naive Bayes</strong> and <strong>SVM</strong> for accuracy.<br><strong>Data Privacy:</strong> Ensuring data security in line with healthcare data standards.",
      "results": "Final outcomes highlighted:<br>- <strong>Naive Bayes</strong> achieved the highest accuracy (76.62%) and F-Measure.<br>- <strong>SVM</strong> had the best precision and lowest false positive rate.<br>- <strong>Simple CART</strong> demonstrated the highest recall, providing diverse insights into model performance.",
      "feedback": "The <strong>data science</strong> approach to <strong>diabetes prediction</strong> received positive feedback, particularly for the comparative model analysis and insights into predictive accuracy. There is potential for further accuracy improvement by exploring additional techniques.",
      "improvements": "Future enhancements include:<br><strong>Advanced Privacy Solutions:</strong> Ensuring data security for large-scale healthcare datasets.<br><strong>Expanded Model Exploration:</strong> Applying advanced machine learning and deep learning techniques.<br><strong>Data Quality Augmentation:</strong> Enhancing dataset size and quality to support more robust model training.",
      "conclusion": "This <strong>data science project</strong> underscores the importance of model comparison for <strong>diabetes prediction</strong>, leveraging healthcare data to support early diagnosis efforts. Continued exploration of advanced techniques can enhance model accuracy and address challenges in <strong>data privacy</strong>.",
      "categories": ["Data Science", "Artificial Intelligence", "Python"],
      "skills": ["Machine Learning Algorithms", "Data Preprocessing", "Big Data Analysis", "Naive Bayes Classification", "Support Vector Machines"],
      "image": "images/projects/DiabetesDiseasePrediction/DiabetesDiseasePrediction.jpg",
      "github": "https://github.com/dixituwindsor/Diabetes_Disease_Prediction"
    },

    {
      "id": "PlacementPackagePrediction",
      "title": "Placement Package Prediction",
      "subtitle": "Data Science-Driven Campus Placement Package Prediction",
      "introduction": "The <strong>Placement Package Prediction System</strong> leverages <strong>machine learning</strong> to predict campus placement packages based on student data. By analyzing <strong>academic performance</strong>, <strong>project work</strong>, and <strong>extracurriculars</strong>, this model provides students with an estimated package figure, accessible via an <strong>Android application</strong>.",
      "background": "<strong>Placement outcomes</strong> are critical for students and colleges alike. This project applies <strong>data science</strong> to analyze historical placement data, generating predictive insights into potential package offers. Using factors like <strong>CGPA</strong>, projects, and skills, the model provides students with personalized placement predictions, aiding their preparation.",
      "features": [
        "<strong>Android Integration:</strong> Students can input their details and receive package predictions directly on their phones.",
        "<strong>Data-Driven Model:</strong> Trained on historical placement data, using supervised learning to predict package outcomes.",
        "<strong>Predictive Insights:</strong> Offers package predictions based on academic and extracurricular data.",
        "<strong>User-Friendly Interface:</strong> Accessible interface for students to easily input data and obtain predictions."
      ],
      "tech_stack": "Technologies used include:<br><br><strong>Python</strong> for model development, <strong>Jupyter Notebook</strong> for algorithm testing, <strong>Android Studio</strong> for the mobile interface, and <strong>NumPy</strong>, <strong>Pandas</strong>, <strong>Scikit-learn</strong> for data processing and model building.",
      "development": "<strong>Data Collection:</strong> Two years of placement data (100+ student records) were collected.<br><strong>Data Preprocessing:</strong> Cleaned and prepared data, handling missing values, and feature selection based on relevance to placement outcomes.<br><strong>Model Training:</strong> Split data into training (80%) and test sets (20%) and used feature scaling.<br><strong>Algorithm Selection:</strong> Tested models like <strong>Random Forest</strong> and <strong>Ensemble Learning</strong>; <strong>Random Forest</strong> delivered the most accurate predictions.",
      "challenges": "<strong>Data Quality:</strong> Ensuring clean and complete data for accurate predictions.<br><strong>Model Accuracy:</strong> Fine-tuning algorithms to improve reliability.<br><strong>Integration:</strong> Ensuring smooth communication between the app’s front-end and machine learning model.",
      "results": "The system provides students with estimated placement packages, achieving satisfactory accuracy with <strong>Random Forest</strong>. This insight aids students in understanding and planning for their placement outcomes.",
      "feedback": "Students found the <strong>Android app</strong> easy to use and appreciated the insights into their expected placement packages, enabling them to prepare effectively for campus placements.",
      "improvements": "<strong>Improving Data Accuracy:</strong> Include more factors like <strong>internships</strong> and <strong>soft skills</strong> to refine predictions.<br><strong>Dataset Expansion:</strong> Adding more years of data will enhance model accuracy.<br><strong>Real-Time Updates:</strong> Allow students to update profiles for instant, refreshed predictions.",
      "conclusion": "This <strong>Placement Package Prediction System</strong> showcases <strong>data science</strong> in campus placements, providing personalized package estimates based on historical data. Accessible via a mobile app, the system offers students actionable insights and supports informed preparation for placement season.",
      "categories": ["Data Science", "Machine Learning", "Python", "Android Development"],
      "skills": ["Random Forest", "Data Preprocessing", "NumPy", "Pandas", "Scikit-learn"],
      "image": "images/projects/PlacementPackagePrediction/PlacementPackagePrediction.jpg",
      "github": "https://github.com/dixituwindsor/Placement_Package_Prediction"
    },

    {
      "id": "MLKIDA",
      "title": "ML K.I.D.A.",
      "subtitle": "Data Science-Powered Mite Detection for Agriculture",
      "introduction": "<strong>ML K.I.D.A.</strong> applies <strong>machine learning</strong> to tackle the challenges of pest detection in agriculture, automating mite identification to reduce crop damage. By combining advanced algorithms with real-time alerts, this system provides farmers with efficient, <strong>data-driven pest management</strong>.",
      "background": "Pest control is essential for <strong>agricultural productivity</strong>, yet traditional methods rely on manual inspection, which can be time-intensive and error-prone. <strong>ML K.I.D.A.</strong> offers a <strong>data science solution</strong>, utilizing high-accuracy machine learning models to detect and track mites, minimizing crop loss through timely interventions.",
      "features": [
        "<strong>YOLOv8 Object Detection:</strong> Uses a high-accuracy deep learning model to identify mites in real-time.",
        "<strong>Deep Sort Tracking:</strong> Tracks mite movement across frames, helping farmers monitor infestations.",
        "<strong>Django Web Interface:</strong> Allows access via a web-based platform, making it usable from any device.",
        "<strong>Data Annotation:</strong> Annotated images via <strong>Roboflow</strong> ensure the model's accuracy in varied environments.",
        "<strong>Real-Time Notifications:</strong> Alerts farmers immediately when mites are detected, enabling prompt action."
      ],
      "tech_stack": "Developed with <strong>Python</strong> for machine learning, <strong>Django</strong> for the web interface, <strong>YOLOv8</strong> for object detection, and <strong>Deep Sort</strong> for tracking. Data annotation was managed through <strong>Roboflow</strong> for high-quality training.",
      "development": "<strong>Data Gathering:</strong> Extensive dataset collection of mite images across crop types.<br><strong>Model Training:</strong> <strong>YOLOv8</strong> trained with annotated images to detect mites under varied conditions.<br><strong>Optimization:</strong> Iteratively fine-tuned <strong>Deep Sort</strong> for real-time tracking without sacrificing detection accuracy.",
      "challenges": "<strong>Real-Time Tracking:</strong> Achieving both speed and accuracy for real-time use required fine-tuning the <strong>Deep Sort</strong> algorithm and frame rate adjustments.",
      "results": "<strong>ML K.I.D.A.</strong> accurately detects mites with 90% precision, significantly reducing manual inspection times and empowering farmers to respond quickly to infestations.",
      "feedback": "Farmers reported enhanced efficiency in pest management. In one case, early detection prevented an infestation, saving an entire crop, highlighting <strong>ML K.I.D.A.</strong>'s value for proactive pest control.",
      "improvements": "<strong>Multi-Pest Detection:</strong> Future updates will include more pest types.<br><strong>Expanded Coverage:</strong> Increase support for a broader range of crops.<br><strong>Mobile Interface:</strong> Enhanced mobile features for real-time, on-the-go alerts.",
      "conclusion": "<strong>ML K.I.D.A.</strong> exemplifies the power of <strong>data science</strong> in precision agriculture, providing farmers with an intelligent, automated solution for pest management and supporting sustainable food production.",
      "categories": ["Data Science", "Artificial Intelligence", "Python", "Web Development"],
      "skills": ["YOLOv8", "Deep Sort", "Django", "Roboflow", "Machine Learning Model Integration"],
      "image": "images/projects/MLKIDA/MLKIDA.jpg",
      "github": "https://github.com/dixituwindsor/MLKIDA",
      "media": {
        "type": "png",
        "path": "./resources/MLKIDA.png"
      }
    },

    {
      "id": "AdventureMinds",
      "title": "AdventureMinds",
      "subtitle": "Collaborative Travel Planning and Social Platform",
      "introduction": "<strong>AdventureMinds</strong> is a travel planning platform that enables users to create, edit, and share itineraries while connecting with other travelers. It combines itinerary management with social networking, making it easy to discover destinations and plan trips collaboratively.",
      "background": "<strong>AdventureMinds</strong> simplifies the travel planning process by allowing users to collaborate on itineraries, share tips, and connect with like-minded travelers. Developed with <strong>Django</strong> and <strong>Python</strong>, the platform leverages these tools to provide a flexible and scalable user experience.",
      "features": [
        "<strong>Itinerary Creation and Sharing:</strong> Users can build and edit travel itineraries with others in real-time.",
        "<strong>Real-Time Chat:</strong> A chat feature allows users to coordinate and discuss travel plans instantly.",
        "<strong>Destination Reviews:</strong> Community insights via tips and reviews enhance the planning experience.",
        "<strong>Networking Profiles:</strong> Users can connect with other travelers based on interests and destinations."
      ],
      "tech_stack": "Developed using <strong>Django</strong> and <strong>Python</strong> for backend, <strong>JavaScript</strong> for interactivity, <strong>SQLite</strong> for development database, and <strong>Django Channels</strong> for real-time chat.",
      "development": "<strong>Chat System:</strong> Built using <strong>Django Channels</strong> for real-time communication.<br><strong>Itinerary Management:</strong> A collaborative editing tool allows users to create and modify travel plans in real time.<br><strong>Social Integration:</strong> Profiles and preferences let users connect with others and find travel companions.",
      "challenges": "<strong>Real-Time Communication:</strong> Implementing the chat required efficient WebSocket data handling.<br><strong>Collaborative Editing:</strong> Ensuring multiple users can edit and save itineraries without conflicts.",
      "results": "<strong>AdventureMinds</strong> successfully integrates itinerary planning with social networking. The chat system is especially effective for real-time collaboration during trip planning.",
      "feedback": "Users found collaboration easy and praised the chat feature for seamless group coordination and travel recommendations.",
      "improvements": "<strong>Advanced Search:</strong> Filters for destinations, duration, and travel type.<br><strong>Mobile App:</strong> Plans for mobile development for on-the-go planning.<br><strong>Enhanced Reviews:</strong> Adding a more robust review and rating system.",
      "conclusion": "<strong>AdventureMinds</strong> revolutionizes travel planning with collaborative features and real-time communication, offering a dynamic platform for connecting and planning together.",
      "categories": ["Web Development", "Python"],
      "skills": ["Python", "Django", "Web Development", "JavaScript", "GitHub"],
      "image": "images/projects/AdventureMinds/AdventureMinds.jpg",
      "github": "https://github.com/dixituwindsor/AdventureMinds",
      "media": {
        "type": "png",
        "path": "./resources/AdventureMinds.png"
      }
    },

    {
      "id": "ReSecure",
      "title": "ReSecure",
      "subtitle": "Transforming Old Smartphones into Home Security Systems",
      "introduction": "<strong>ReSecure</strong> repurposes old smartphones into functional home security cameras. With a simple setup through a companion app, <strong>ReSecure</strong> offers an affordable and accessible home security solution, eliminating the need for new hardware.",
      "background": "Traditional home security solutions can be costly, so <strong>ReSecure</strong> was developed to provide an affordable alternative by transforming unused smartphones into security cameras. This project promotes both <strong>sustainability</strong> and <strong>accessibility</strong> in home surveillance.",
      "features": [
        "<strong>Cross-Platform Development:</strong> Built using <strong>Flutter</strong>, providing a consistent experience on Android and iOS.",
        "<strong>Firebase Real-Time Data:</strong> Integrates with <strong>Firebase</strong> for secure video streaming, notifications, and user management.",
        "<strong>Motion Detection Alerts:</strong> Real-time motion detection with instant notifications to users.",
        "<strong>User-Friendly Interface:</strong> Simple setup and operation make <strong>ReSecure</strong> accessible to all users.",
        "<strong>Multi-User Access:</strong> Allows multiple users to monitor and manage the system, enhancing flexibility."
      ],
      "tech_stack": "Developed with <strong>Flutter</strong> for mobile compatibility, <strong>Firebase</strong> for real-time notifications and video streaming, and <strong>Google Firebase</strong> for secure user authentication.",
      "development": "<strong>Agile Methodology:</strong> Planned, designed, developed, tested, and deployed iteratively, with continuous feedback from early adopters.<br><strong>Real-Time Features:</strong> Integrated motion detection, real-time alerts, and user management.",
      "challenges": "<strong>Performance Optimization:</strong> Balancing real-time accuracy with low latency, especially on older devices.",
      "results": "<strong>ReSecure</strong> effectively transforms old smartphones into home security cameras, offering real-time streaming and alerts. Early adopters report reduced monitoring time and increased security, all with minimal setup costs.",
      "feedback": "Users praise <strong>ReSecure</strong>’s accessibility and ease of setup, with even non-technical users able to install the system quickly and effectively.",
      "improvements": "<strong>Web Portal Access:</strong> Planned web portal access for increased flexibility.<br><strong>Enhanced Motion Detection:</strong> Further customization to reduce false positives.<br><strong>Smart Home Integration:</strong> Future updates will allow integration with other smart home devices.",
      "conclusion": "<strong>ReSecure</strong> redefines home security by turning old smartphones into effective security systems. With its user-friendly design and focus on sustainability, <strong>ReSecure</strong> offers a practical, low-cost solution for modern home security needs.",
      "categories": ["Android Applications"],
      "skills": ["Flutter", "Firebase", "Motion Detection", "Security Camera Integration", "Cross-Platform Development"],
      "image": "images/projects/ReSecure/ReSecure.jpg",
      "github": "https://github.com/dixituwindsor/resecure",
      "media": {
        "type": "ppt",
        "path": "https://docs.google.com/presentation/d/13W4d7LXA4i-n67fZ8CwLnTTLYKVn64gH/edit?usp=sharing&ouid=104870617554992213042&rtpof=true&sd=true"
      }
    },

    {
      "id": "WiseBridge",
      "title": "WiseBridge",
      "subtitle": "Online Education and Networking for MAC Students",
      "introduction": "<strong>WiseBridge</strong> is an educational platform connecting <strong>MAC students</strong> and <strong>alumni</strong> from the <strong>University of Windsor</strong>. It allows experts to share and monetize course-related content, while providing students with reliable resources and networking opportunities.",
      "background": "<strong>WiseBridge</strong> was created to bridge the gap between traditional education and modern online learning. Designed specifically for <strong>MAC students</strong>, the platform offers expert-verified resources and fosters networking within the academic community.",
      "features": [
        "<strong>Content Upload and Monetization:</strong> Experts can share materials like notes and videos, with options to monetize.",
        "<strong>Student Access:</strong> Students access verified resources, with offline download options for convenience.",
        "<strong>Networking:</strong> Chat groups and event scheduling facilitate networking and collaboration.",
        "<strong>Content Moderation:</strong> Content is reviewed by admins to maintain quality.",
        "<strong>User Roles:</strong> Distinct roles for <strong>Students</strong>, <strong>Experts</strong>, and <strong>Admins</strong> ensure organized access and functionality."
      ],
      "tech_stack": "Developed using <strong>Java</strong> for core programming, <strong>Android Studio</strong> for the app, <strong>Firebase</strong> for database and authentication, <strong>GitHub</strong> for version control, and <strong>Jira</strong> for project management.",
      "development": "<strong>Project Planning:</strong> Organized into four sprints, covering setup, UI design, development, and testing.<br><strong>Sprint Reports:</strong> Regular progress assessments with adjustments for team learning needs.<br><strong>System Design:</strong> User roles, content management, and subscription models shaped through class diagrams and use cases.",
      "challenges": "<strong>Team Familiarity:</strong> The team’s learning curve with Android development required extra time.<br><strong>Time Management:</strong> Adjustments to sprints for training and unexpected needs.<br><strong>Scaling Content Moderation:</strong> Managing content review became challenging as the platform expanded.",
      "results": "<strong>WiseBridge</strong> successfully provides a platform for sharing academic content and building networks. Its review system ensures high-quality resources, and the monetization feature offers a benefit for expert users.",
      "feedback": "Students and experts appreciate <strong>WiseBridge</strong>’s focus on <strong>MAC program</strong> needs. The interface and monetization option were particularly valued by experts, with suggestions for scalable content moderation as the platform grows.",
      "improvements": "<strong>Scalability:</strong> Improving moderation for a larger user base.<br><strong>New Features:</strong> Adding seminar and event organization tools.<br><strong>Enhanced Networking:</strong> Expanding collaboration options beyond chat and event scheduling.",
      "conclusion": "<strong>WiseBridge</strong> uniquely supports the <strong>University of Windsor</strong>’s <strong>MAC community</strong>, offering a combination of educational resources, networking, and monetization. It’s a valuable tool for fostering academic collaboration and support.",
      "categories": ["Android Applications"],
      "skills": ["Java", "Firebase", "Android Studio", "Scrum Methodology", "GitHub"],
      "image": "images/projects/WiseBridge/WiseBridge.jpg",
      "github": "https://github.com/dixituwindsor/WiseBridge"
    },

    {
      "id": "TradeManager",
      "title": "Trade Manager",
      "subtitle": "Automating Multi-Account Trading with Python and Data Analytics",
      "introduction": "<strong>Trade Manager</strong> is a desktop application that automates the management of multiple trading accounts across various brokers. By leveraging <strong>Python</strong> and <strong>data analytics</strong>, it simplifies trade execution, automates strategies, and consolidates portfolio insights, reducing the time and effort required for multi-account trading.",
      "background": "Managing trades across multiple accounts can be time-consuming and error-prone. <strong>Trade Manager</strong> provides a unified platform for streamlined trade execution, utilizing <strong>Python</strong> for automation and <strong>MongoDB</strong> for data storage. This approach minimizes errors, enables real-time decision-making, and improves portfolio management efficiency.",
      "features": [
        "<strong>Multi-Account Trading:</strong> Execute and track trades across multiple broker accounts from one platform.",
        "<strong>Automated Trading Strategies:</strong> Select from pre-defined strategies that automate trade execution based on user preferences.",
        "<strong>Comprehensive Trade History:</strong> View consolidated trading history with filtering options for data analysis.",
        "<strong>Portfolio Management:</strong> Real-time open/close positions and net P/L calculations for simplified portfolio oversight.",
        "<strong>Data-Driven Insights:</strong> Weekly profit/loss analysis and commission tracking offer valuable trading insights."
      ],
      "tech_stack": "The project uses <strong>Python</strong> for core functionality, <strong>MongoDB</strong> for data management, <strong>WebSockets</strong> for real-time broker communication, and <strong>InstallForge</strong> for software packaging.",
      "development": "<strong>System Architecture:</strong> Designed to connect multiple accounts with real-time data updates.<br><strong>Automation and Data Processing:</strong> Uses algorithmic trading to automate orders, with data analytics for P/L insights.<br><strong>Testing:</strong> Extensive testing for accuracy in execution and data handling across accounts.",
      "challenges": "<strong>Multi-Account Synchronization:</strong> Managing real-time data from various brokers efficiently.<br><strong>Real-Time Data Processing:</strong> Optimizing performance for timely trade execution.<br><strong>Security:</strong> Ensuring secure handling of credentials and trading data.",
      "results": "<strong>Trade Manager</strong> enables seamless multi-account trading with automated execution and consolidated portfolio views. Users save time and reduce manual errors, benefiting from <strong>data-driven trade insights</strong>.",
      "feedback": "Traders appreciated the convenience and automation, allowing them to focus on strategy rather than execution. The consolidated view of all accounts and automated strategies were especially valued.",
      "improvements": "<strong>Expanded Broker Support:</strong> Adding compatibility with more brokers.<br><strong>Enhanced Security:</strong> Implementing two-factor authentication.<br><strong>Performance Optimization:</strong> Further improvements in real-time data processing for faster execution.",
      "conclusion": "<strong>Trade Manager</strong> provides a powerful solution for multi-account trading by combining <strong>Python’s automation capabilities</strong> with <strong>data analytics</strong>. It empowers traders with an efficient, user-friendly tool that streamlines portfolio management and enhances trade accuracy.",
      "categories": ["Python", "Algo Trading", "Data Science"],
      "skills": ["Python Programming", "MongoDB", "Data Analysis", "Automation", "Real-Time Data Processing"],
      "image": "images/projects/TradeManager/TradeManager.jpg",
      "media": {
        "type": "ppt",
        "path": "https://docs.google.com/presentation/d/1MYDY8p4A-15WxZ6RJR1Z5quuqxBINJkn/edit?usp=sharing&ouid=104870617554992213042&rtpof=true&sd=true"
      }
    },

    {
      "id": "TradeMaster",
      "title": "Trade Master",
      "subtitle": "Automated Trade Execution System for High-Frequency Algorithmic Trading",
      "introduction": "<strong>Trade Master</strong> is a back-end trade execution system developed for <strong>AlgoSuccess</strong> to automate and streamline trading. Built with <strong>Python</strong>, it provides seamless integration with <strong>brokerage APIs</strong>, ensuring real-time order placement. Designed for <strong>high-frequency traders</strong>, <strong>Trade Master</strong> enhances the efficiency of automated trading by minimizing latency and supporting large volumes of trades.",
      "background": "As demand grows for advanced <strong>algorithmic trading solutions</strong>, <strong>Trade Master</strong> was created to automate trade execution within the <strong>AlgoSuccess platform</strong>. Leveraging <strong>Python’s</strong> power in handling asynchronous tasks and <strong>MongoDB</strong> for data logging, <strong>Trade Master</strong> offers traders a low-latency, high-performance tool for managing automated strategies, freeing them to focus on refining their algorithms.",
      "features": [
        "<strong>Real-Time Execution:</strong> Enables immediate trade placement, maintaining accuracy and timing across accounts.",
        "<strong>API Integration:</strong> Connects with multiple brokers via <strong>WebSocket</strong>, allowing seamless account management and order placement.",
        "<strong>High-Volume Support:</strong> Handles large trade volumes efficiently, making it ideal for <strong>high-frequency trading</strong>.",
        "<strong>Error Handling & Risk Management:</strong> Built-in mechanisms to handle failed orders and mitigate risks, ensuring stability and consistency in volatile markets."
      ],
      "tech_stack": "Developed using <strong>Python</strong> for back-end processing, <strong>WebSocket</strong> for real-time broker communication, <strong>MongoDB</strong> for trade logging, and <strong>AWS</strong> for scalable cloud deployment.",
      "development": "<strong>API Integration:</strong> Utilizes <strong>WebSocket</strong> for real-time execution and trade updates with broker APIs.<br><strong>Error Management:</strong> Implements robust error-handling to manage disruptions in broker connectivity.<br><strong>Trade Validation:</strong> Validates trades against predefined conditions for effective risk management.",
      "challenges": "<strong>Low-Latency Optimization:</strong> Required extensive optimization to ensure rapid order placement.<br><strong>High-Volume Handling:</strong> Ensured system stability under large trade volumes without performance bottlenecks.<br><strong>API Reliability:</strong> Developed redundancy for consistent trade execution despite occasional broker API issues.",
      "results": "<strong>Trade Master</strong> successfully supports <strong>high-frequency trading</strong> with real-time execution, handling multiple broker integrations smoothly. Traders benefit from low-latency order processing and reliable automation, streamlining their workflow.",
      "feedback": "AlgoSuccess users praised the system’s efficiency, particularly its speed and reliability. Automation allowed traders to focus on strategy, resulting in improved trading performance.",
      "improvements": "<strong>Expanded Broker Support:</strong> Adding compatibility with more brokers.<br><strong>Enhanced Risk Management:</strong> More customizable risk management profiles.<br><strong>Latency Optimization:</strong> Further reductions in trade execution times for even faster placement.",
      "conclusion": "<strong>Trade Master</strong> is a powerful, <strong>Python-based system</strong> for automated trading that combines high-speed execution with robust data handling and <strong>API integration</strong>. By supporting <strong>algorithmic trading strategies</strong>, it provides AlgoSuccess users with a scalable, efficient solution for the dynamic world of <strong>high-frequency trading</strong>.",
      "categories": ["Python", "Algo Trading", "Data Science"],
      "skills": ["Python Programming", "WebSocket", "Asynchronous Programming", "MongoDB", "Real-Time Data Processing"],
      "image": "images/projects/TradeMaster/TradeMaster.jpg",
      "media": {
        "type": "jpg",
        "path": "./resources/TradeMaster.jpg"
      }
    }
  ]
}